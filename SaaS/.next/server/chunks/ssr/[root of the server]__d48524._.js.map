{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/zenyi.gomez/OneDrive%20-%20C-Kore%20Systems/Desktop/TCs/SaaS/src/utils/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  console.error('Supabase URL or Anon Key is missing. Please set the environment variables.');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey); "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAErE,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/zenyi.gomez/OneDrive%20-%20C-Kore%20Systems/Desktop/TCs/SaaS/src/context/AuthContext.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react'\r\nimport { Session, User } from '@supabase/supabase-js'\r\nimport { supabase } from '@/utils/supabase'\r\n\r\ntype AuthContextType = {\r\n  user: User | null\r\n  session: Session | null\r\n  isLoading: boolean\r\n  signOut: () => Promise<void>\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport function AuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null)\r\n  const [session, setSession] = useState<Session | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    // Get initial session\r\n    const getInitialSession = async () => {\r\n      try {\r\n        const { data: { session } } = await supabase.auth.getSession()\r\n        setSession(session)\r\n        setUser(session?.user ?? null)\r\n      } catch (error) {\r\n        console.error('Error getting session:', error)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    getInitialSession()\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      (_event, session) => {\r\n        setSession(session)\r\n        setUser(session?.user ?? null)\r\n        setIsLoading(false)\r\n      }\r\n    )\r\n\r\n    // Cleanup\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  }, [])\r\n\r\n  const signOut = async () => {\r\n    try {\r\n      await supabase.auth.signOut()\r\n    } catch (error) {\r\n      console.error('Error signing out:', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, session, isLoading, signOut }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n  return context\r\n} "],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAaA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAA2B;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IACvD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,sBAAsB;QACtB,MAAM,oBAAoB;YACxB,IAAI;gBACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,wHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,UAAU;gBAC5D,WAAW;gBACX,QAAQ,SAAS,QAAQ;YAC3B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,0BAA0B;YAC1C,SAAU;gBACR,aAAa;YACf;QACF;QAEA;QAEA,0BAA0B;QAC1B,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,GAAG,wHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,iBAAiB,CAChE,CAAC,QAAQ;YACP,WAAW;YACX,QAAQ,SAAS,QAAQ;YACzB,aAAa;QACf;QAGF,UAAU;QACV,OAAO;YACL,aAAa,WAAW;QAC1B;IACF,GAAG,EAAE;IAEL,MAAM,UAAU;QACd,IAAI;YACF,MAAM,wHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;QAC7B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;QACtC;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;YAAW;QAAQ;kBAC9D;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/zenyi.gomez/OneDrive%20-%20C-Kore%20Systems/Desktop/TCs/SaaS/src/context/CompanyContext.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react'\r\nimport { useAuth } from './AuthContext'\r\nimport { supabase } from '@/utils/supabase'\r\n\r\nexport type CompanyDetails = {\r\n  name: string\r\n  description?: string\r\n  industry?: string\r\n  businessType?: string\r\n  primaryCustomers?: string\r\n  contractPreferences?: string\r\n}\r\n\r\ntype CompanyContextType = {\r\n  company: CompanyDetails | null\r\n  isLoading: boolean\r\n  saveCompanyDetails: (details: CompanyDetails) => Promise<void>\r\n}\r\n\r\nconst CompanyContext = createContext<CompanyContextType | undefined>(undefined)\r\n\r\nexport function CompanyProvider({ children }: { children: ReactNode }) {\r\n  const [company, setCompany] = useState<CompanyDetails | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const { user, session } = useAuth()\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setCompany(null)\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchCompanyDetails = async () => {\r\n      setIsLoading(true)\r\n      try {\r\n        // Use backend API instead of direct Supabase access\r\n        const response = await fetch('http://localhost:8000/company-profiles/me', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${session?.access_token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n\r\n        if (response.ok) {\r\n          const data = await response.json()\r\n          setCompany({\r\n            name: data.name,\r\n            description: data.description,\r\n            industry: data.industry,\r\n            businessType: data.business_type,\r\n            primaryCustomers: data.primary_customers,\r\n            contractPreferences: data.contract_preferences\r\n          })\r\n        } else if (response.status === 404) {\r\n          // Profile not found, that's okay\r\n          setCompany(null)\r\n        } else {\r\n          console.error('Error fetching company profile:', await response.text())\r\n          setCompany(null)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in company fetch:', error)\r\n        setCompany(null)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (session) {\r\n      fetchCompanyDetails()\r\n    } else {\r\n      setIsLoading(false)\r\n    }\r\n  }, [user, session])\r\n\r\n  const saveCompanyDetails = async (details: CompanyDetails) => {\r\n    if (!user || !session) return\r\n\r\n    try {\r\n      // Use backend API instead of direct Supabase access\r\n      const response = await fetch('http://localhost:8000/company-profiles', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${session.access_token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          name: details.name,\r\n          description: details.description,\r\n          industry: details.industry,\r\n          business_type: details.businessType,\r\n          primary_customers: details.primaryCustomers,\r\n          contract_preferences: details.contractPreferences\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to save company details: ${await response.text()}`)\r\n      }\r\n\r\n      setCompany(details)\r\n    } catch (error) {\r\n      console.error('Error saving company details:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CompanyContext.Provider value={{ company, isLoading, saveCompanyDetails }}>\r\n      {children}\r\n    </CompanyContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useCompany() {\r\n  const context = useContext(CompanyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useCompany must be used within a CompanyProvider')\r\n  }\r\n  return context\r\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAqBA,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAkC;AAE9D,SAAS,gBAAgB,EAAE,QAAQ,EAA2B;IACnE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAyB;IAC9D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,UAAO,AAAD;IAEhC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,MAAM;YACT,WAAW;YACX,aAAa;YACb;QACF;QAEA,MAAM,sBAAsB;YAC1B,aAAa;YACb,IAAI;gBACF,oDAAoD;gBACpD,MAAM,WAAW,MAAM,MAAM,6CAA6C;oBACxE,QAAQ;oBACR,SAAS;wBACP,iBAAiB,CAAC,OAAO,EAAE,SAAS,cAAc;wBAClD,gBAAgB;oBAClB;gBACF;gBAEA,IAAI,SAAS,EAAE,EAAE;oBACf,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,WAAW;wBACT,MAAM,KAAK,IAAI;wBACf,aAAa,KAAK,WAAW;wBAC7B,UAAU,KAAK,QAAQ;wBACvB,cAAc,KAAK,aAAa;wBAChC,kBAAkB,KAAK,iBAAiB;wBACxC,qBAAqB,KAAK,oBAAoB;oBAChD;gBACF,OAAO,IAAI,SAAS,MAAM,KAAK,KAAK;oBAClC,iCAAiC;oBACjC,WAAW;gBACb,OAAO;oBACL,QAAQ,KAAK,CAAC,mCAAmC,MAAM,SAAS,IAAI;oBACpE,WAAW;gBACb;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,WAAW;YACb,SAAU;gBACR,aAAa;YACf;QACF;QAEA,IAAI,SAAS;YACX;QACF,OAAO;YACL,aAAa;QACf;IACF,GAAG;QAAC;QAAM;KAAQ;IAElB,MAAM,qBAAqB,OAAO;QAChC,IAAI,CAAC,QAAQ,CAAC,SAAS;QAEvB,IAAI;YACF,oDAAoD;YACpD,MAAM,WAAW,MAAM,MAAM,0CAA0C;gBACrE,QAAQ;gBACR,SAAS;oBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,YAAY,EAAE;oBACjD,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,MAAM,QAAQ,IAAI;oBAClB,aAAa,QAAQ,WAAW;oBAChC,UAAU,QAAQ,QAAQ;oBAC1B,eAAe,QAAQ,YAAY;oBACnC,mBAAmB,QAAQ,gBAAgB;oBAC3C,sBAAsB,QAAQ,mBAAmB;gBACnD;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,MAAM,SAAS,IAAI,IAAI;YAC5E;YAEA,WAAW;QACb,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,MAAM;QACR;IACF;IAEA,qBACE,8OAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;YAAS;YAAW;QAAmB;kBACtE;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}